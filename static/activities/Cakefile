# Cafefile for Newebe News application.

# Name of application to build
appName = "activities"

# Dependencies and shortcuts
sys    = require 'sys'
print  = sys.print
puts   = sys.puts
fs     = require 'fs'
{exec} = require 'child_process'

# Files to compile
appFiles  = [
  '../platform/src/views/infodialog.coffee'
  '../platform/src/views/loadingindicator.coffee'
]

walk = (dir) ->
  list = fs.readdirSync(dir)
  if list
    for file in list
      if file
        filename = dir + '/' + file
        stat = fs.statSync(filename)
        if stat and stat.isDirectory()
          walk (filename)
        else
            appFiles.push(filename)
        
walk("./src")


# Build task
task 'build', 'Build single application file from source files', ->
  puts 'Start build'
  appContents = new Array remaining = appFiles.length

  # Compile to JS
  puts 'Building JS'

  puts "File to Compile"
  for appFile in appFiles
    puts appFile

  # Load files in memory then process compilation
  for file, index in appFiles then do (file, index) ->
    fs.readFile file, 'utf8', (err, fileContents) ->
      throw err if err
      appContents[index] = fileContents
      process() if --remaining is 0


  process = ->
    # Concatenate files 
    fs.writeFile "lib/#{appName}.coffee", appContents.join('\n\n'), 'utf8', (err) ->
      throw err if err

      # Compile files
      exec "coffee --compile lib/#{appName}.coffee", (err, stdout, stderr) ->
        throw err if err
        puts stdout + stderr
        fs.unlink "lib/#{appName}.coffee", (err) ->
          throw err if err
          puts "JS Built to lib/#{appName}.js"
          invoke 'minify'


# Minify task makes usage of uglifiyjs.
task 'minify', 'Minify the resulting application file after build', ->

  puts 'Start minify'
  command = "uglifyjs lib/#{appName}.js > lib/#{appName}.production.js"

  exec command, (err, stdout, stderr) ->
    throw err if err
    puts stdout + stderr
    puts 'Minify done'
    invoke 'styles'


# Build styles via stylus
task 'styles', 'Compile styles to CSS', ->
    
  puts 'Building CSS'
  exec "stylus styles/#{appName}.styl", (err, stdout, stderr) ->
    throw err if err
    puts stdout + stderr
    puts 'CSS built'


# Automatically build app when a change occurs
task 'watch', 'Watch source files and build changes', ->

    for file in appFiles then do (file) ->
        fs.watchFile "src/#{file}.coffee", (curr, prev) ->
            if +curr.mtime isnt +prev.mtime
                puts "Saw change in lib/#{file}.coffee"
                invoke 'build'
